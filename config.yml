listen_addr: 0.0.0.0:5000
internal_endpoint_access_whitelist:
  - 127.0.0.1/8
  - 192.168.0.0/16
  - 10.0.0.0/8
  - 172.16.0.0/12
  - ::1/128
  - fc00::/7
connection_redis_sync:
  # Connection state and tags updated here to the hash key connection:<id>
  addr: redis://localhost:6379/0?client_name=wsgateway
stream_redis:
  # open/close/message connection events streaming to redis
  addr: redis://localhost:6379/0?client_name=wsgatewaystream&pool_size=1000
  stream_name: connectionevents
stream_amqp:
  # open/close/message connection events streaming to AMQP
  # addr: amqp://guest:guest@localhost:5672/

  # If manually configuring the exchange, create it with type "topic"
  exchange: wsgateway

  # If a queue is given, it will be created and bound to the exchange.
  # If no queue is given, the exchange routing must be configured on the AMQP server.
  # queue: wsgateway.wsevents

  # Default: no value
  # routing_key: commmand-{json.command:unknown_command}

max_message_size_kb: 1024
endpoints:
  - path: /connect
    set_tags:
      foo: bar
      other: tag
    stream_include_tags:
      - foo
      - group
    max_message_size_kb: 1024
    json_extract_vars:
      # Parse the websocket message as JSON and extract these paths as variables.
      # "command: data.command" - creates a variable "command", reading "data.command" from the
      # incoming JSON message.
      # Var names can only consist of a-zA-Z0-9_
      command: "command"
      other: "data.actionRef"

  - path: /connect/v2
    set_tags:
      version: 2
    stream_include_tags:
      - version
      - group
prometheus:
  enabled: true
